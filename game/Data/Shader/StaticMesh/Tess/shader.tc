#version 400

layout(vertices = 3) out;
in vec3 vPosition[];
in vec3 vNormal[];
in vec2 vCoord[];
in vec3 vTangent[];
out vec3 tcPosition[];
out vec3 tcNormal[];
out vec2 tcCoord[];
out vec3 tcTangent[];


#define ID gl_InvocationID


uniform mat4 PM,CM,MVM;
uniform vec2 screen_size=vec2(800.,600.);

mat4 mvp=PM*CM*MVM;
uniform float lod_factor=3.;

vec4 project(vec4 vertex){
    vec4 result = mvp * vertex;
    result /= result.w;
    return result;
}

vec2 screen_space(vec4 vertex){
    return (clamp(vertex.xy, -1.3, 1.3)+1) * (screen_size*0.5);
}

float level(vec2 v0, vec2 v1){
     return clamp(distance(v0, v1)/lod_factor, 1, 64);
}

bool offscreen(vec4 vertex){
    if(vertex.z < -0.5){
        return true;
    }   
    return 
		vertex.x < -1.7 || vertex.y < -1.7 ||
		vertex.x >  1.7 || vertex.y >  1.7

    ;  
}


void main()
{
	tcTangent[ID]=vTangent[0];
    tcPosition[ID] = vPosition[ID];
	tcNormal[ID]=vNormal[ID];
	tcCoord[ID]=vCoord[ID];
    if (ID == 0) {
	

  
  
		
         vec4 v0 = project(vec4(vPosition[0],1));
         vec4 v1 = project(vec4(vPosition[1],1));
         vec4 v2 = project(vec4(vPosition[2],1));


         if(all(bvec3(
             offscreen(v0),
             offscreen(v1),
             offscreen(v2)
         ))){
			gl_TessLevelInner[0] = 0;
			gl_TessLevelOuter[0] = 0;
			gl_TessLevelOuter[1] = 0;
			gl_TessLevelOuter[2] = 0;
         }
         else{
             vec2 ss0 = screen_space(v0);
             vec2 ss1 = screen_space(v1);
             vec2 ss2 = screen_space(v2);

             float e0 = level(ss1, ss2);
             float e1 = level(ss0, ss1);
             float e2 = level(ss2, ss0);

             gl_TessLevelInner[0] = mix(e1, e2, 0.5);
             gl_TessLevelOuter[0] = e0;
             gl_TessLevelOuter[1] = e1;
             gl_TessLevelOuter[2] = e2;

         }
     
	 
	
	/*
        gl_TessLevelInner[0] = TessLevelInner;
        gl_TessLevelOuter[0] = TessLevelOuter;
        gl_TessLevelOuter[1] = TessLevelOuter;
        gl_TessLevelOuter[2] = TessLevelOuter;
		*/
    }
}
