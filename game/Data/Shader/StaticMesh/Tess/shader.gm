
layout(triangles) in;
//layout(line_strip, max_vertices = 3) out;
layout(triangle_strip, max_vertices = 3) out;
in vec3 tePosition[3];
in vec3 tePatchDistance[3];
out vec3 gFacetNormal;
out vec3 gPatchDistance;
out vec3 gTriDistance;


in vec2 teCoord[3];
in vec3 teNormal[3];
in vec3 teVertex[3];
in vec3 teTangent[3];

out vec2 tex_coords_frag;
out vec3 v;   				//vertex position
out vec3 N;					//normal
out vec3 T;					//tangent

uniform mat4 MVM;

void main()
{
	
	
    vec3 A = tePosition[2] - tePosition[0];
    vec3 B = tePosition[1] - tePosition[0];
    gFacetNormal = mat3(MVM) * normalize(cross(A, B));
    
	N=teNormal[0];
	v=teVertex[0];
	T=teTangent[0];
    gPatchDistance = tePatchDistance[0];
    gTriDistance = vec3(1, 0, 0);
	tex_coords_frag=teCoord[0];
    gl_Position = gl_in[0].gl_Position; EmitVertex();

	N=teNormal[1];
	v=teVertex[1];
	T=teTangent[1];
    gPatchDistance = tePatchDistance[1];
    gTriDistance = vec3(0, 1, 0);
	tex_coords_frag=teCoord[1];
    gl_Position = gl_in[1].gl_Position; EmitVertex();

	N=teNormal[2];
	v=teVertex[2];
	T=teTangent[2];
    gPatchDistance = tePatchDistance[2];
    gTriDistance = vec3(0, 0, 1);
	tex_coords_frag=teCoord[2];
    gl_Position = gl_in[2].gl_Position; EmitVertex();

    EndPrimitive();
}