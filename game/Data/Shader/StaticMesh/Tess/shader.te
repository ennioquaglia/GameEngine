#version 400

layout(triangles, equal_spacing, ccw) in;
in vec3 tcPosition[];
in vec3 tcNormal[];
in vec2 tcCoord[];
in vec3 tcTangent[];
out vec3 tePosition;
out vec3 tePatchDistance;
out vec2 teCoord;
out vec3 teVertex;
out vec3 teNormal;
out vec3 teTangent;


uniform mat4 PM,CM,MVM;
uniform sampler2D dispMap;

void main()
{
    vec3 p0 = gl_TessCoord.x * tcPosition[0];
    vec3 p1 = gl_TessCoord.y * tcPosition[1];
    vec3 p2 = gl_TessCoord.z * tcPosition[2];
    tePatchDistance = gl_TessCoord;
    //tePosition = normalize(p0 + p1 + p2);
	tePosition = p0 + p1 + p2;
	
	vec3 n0 = gl_TessCoord.x * tcNormal[0];
    vec3 n1 = gl_TessCoord.y * tcNormal[1];
    vec3 n2 = gl_TessCoord.z * tcNormal[2];
	vec3 normal = normalize(vec3(n0+n1+n2));
	
	vec2 c0 = gl_TessCoord.x * tcCoord[0];
    vec2 c1 = gl_TessCoord.y * tcCoord[1];
    vec2 c2 = gl_TessCoord.z * tcCoord[2];
	teCoord = c0+c1+c2;
	
	vec3 t0 = gl_TessCoord.x * tcTangent[0];
    vec3 t1 = gl_TessCoord.y * tcTangent[1];
    vec3 t2 = gl_TessCoord.z * tcTangent[2];
	teTangent = t0+t1+t2;
	
	float d=0.05,height=texture(dispMap,teCoord.xy).x;;
    height+=texture(dispMap,teCoord.xy+vec2(d)).x;
	height+=texture(dispMap,teCoord.xy+vec2(-d)).x;
	height+=texture(dispMap,teCoord.xy+vec2(d,-d)).x;
	height+=texture(dispMap,teCoord.xy+vec2(-d,d)).x;
	height/=5;
	
	teVertex=vec3(MVM * vec4(tePosition+normal*texture2D(dispMap,teCoord).x*0.5, 1));
	
	//tePosition+=vec4(normal*texture2D(dispMap,teCoord).x*5.,0.);
    gl_Position=PM*CM * vec4(teVertex,1.);
	tePosition =gl_Position.xyz;
   //tePosition+=normal*texture2D(dispMap,teCoord).x*5.;
   //gl_Position=vec4(tePosition,1.);
	//tePosition=gl_Position=gl_Position + vec4(normal*texture2D(dispMap,teCoord).x*5.,0.);
	teNormal=vec3(MVM*vec4(normal,1.));
}