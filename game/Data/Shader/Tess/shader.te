layout(triangles, equal_spacing, cw) in;



in vec2 tcTexCoord[];
vec3 tePosition;
out float distance;
out vec3 tePatchDistance;
out vec2 teTexCoord;
out vec3 V;


uniform mat4 offset;
uniform mat4 PM;

uniform vec3 EyePos;


uniform sampler2D HeightMap;
void main()
{

	vec3 p0 = gl_TessCoord.x * gl_in[0].gl_Position;
    vec3 p1 = gl_TessCoord.y * gl_in[1].gl_Position;
    vec3 p2 = gl_TessCoord.z * gl_in[2].gl_Position;
	vec3 pos = normalize (p0 + p1 + p2);
	gl_Position = gl_ProjectionMatrix *PM*gl_ModelViewMatrix * vec4 (pos, 1.0);
/*
	vec3 p0 = gl_TessCoord.x * gl_in[0].gl_Position;
    vec3 p1 = gl_TessCoord.y * gl_in[1].gl_Position;
    vec3 p2 = gl_TessCoord.z * gl_in[2].gl_Position;
	
	tePatchDistance = gl_TessCoord;
    //tePosition = normalize(p0 + p1 + p2);
	tePosition = p0+p1+p2;
	
	vec2 tc0 = gl_TessCoord.x * tcTexCoord[0];
	vec2 tc1 = gl_TessCoord.y * tcTexCoord[1];
	vec2 tc2 = gl_TessCoord.z * tcTexCoord[2];	
	teTexCoord = tc0 + tc1 + tc2;
	
	float height=0;texture2D(HeightMap,teTexCoord.xy).x;
	float d=0.005;
    
	height+=texture2D(HeightMap,teTexCoord.xy+vec2(d)).x;
	height+=texture2D(HeightMap,teTexCoord.xy+vec2(-d)).x;
	height+=texture2D(HeightMap,teTexCoord.xy+vec2(d,-d)).x;
	height+=texture2D(HeightMap,teTexCoord.xy+vec2(-d,d)).x;
	height/=5;
	
	vec3 normal = normalize(cross(vec3(gl_in[1].gl_Position - gl_in[0].gl_Position),vec3(gl_in[2].gl_Position - gl_in[0].gl_Position)));
 
	tePosition+=normal*height*25.6;
    gl_Position = gl_ProjectionMatrix *PM*gl_ModelViewMatrix*vec4(tePosition, 1);
	V=gl_ModelViewMatrix*vec4(tePosition, 1);
	distance=distance(EyePos,gl_ModelViewMatrix*vec4(tePosition, 1));
	tePatchDistance =distance;*/
}