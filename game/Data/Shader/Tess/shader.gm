
layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

in vec3 tePatchDistance[3];
out vec3 gFacetNormal;
out vec3 gPatchDistance;
out vec3 gTriDistance;
out vec3 gPrimitive;

out vec3 N;
//out vec3 gPatchDistance;
//out vec3 gTriDistance;
//out vec3 v;

in vec3 V[3];
out vec3 v;

void main()
{

    vec3 A = gl_in[2].gl_Position - gl_in[0].gl_Position;
    vec3 B = gl_in[1].gl_Position - gl_in[0].gl_Position;
    N=gFacetNormal = gl_NormalMatrix * normalize(cross(A, B));
    
	v=V[0];
    gPatchDistance = tePatchDistance[0];
    gTriDistance = vec3(1, 0, 0);
    gPrimitive = gl_Position = gl_in[0].gl_Position; EmitVertex();

	v=V[1];
    gPatchDistance = tePatchDistance[1];
    gTriDistance = vec3(0, 1, 0);
    gPrimitive = gl_Position = gl_in[1].gl_Position; EmitVertex();

	v=V[2];
    gPatchDistance = tePatchDistance[2];
    gTriDistance = vec3(0, 0, 1);
    gPrimitive = gl_Position = gl_in[2].gl_Position; EmitVertex();

    EndPrimitive();
}